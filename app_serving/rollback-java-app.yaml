apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: rollback-java-app
  namespace: argo
spec:
  entrypoint: main
  onExit: exit-handler
  arguments:
    parameters:
    - name: organization_id
      value: "ose4j7p39"
    - name: project_id
      value: ""
    - name: target_cluster_id
      value: "C011b88fa"
    - name: app_name
      value: "sample-petclinic"
    - name: namespace
      value: "{{workflow.parameters.app_name}}"
    - name: asa_id
      value: ""
    - name: asa_task_id
      value: ""
    - name: helm_revision
      value: ""
    # tks_info service URL
    - name: tks_api_url
      value: "http://tks-api.tks.svc:9110"

  templates:
  - name: exit-handler
    steps:
    - - name: notify-rollback-failure
        templateRef:
          name: update-tks-asa-status
          template: updateTksAsaStatus
        arguments:
          parameters:
          - name: organization_id
            value: "{{workflow.parameters.organization_id}}"
          - name: project_id
            value: "{{workflow.parameters.project_id}}"
          - name: asa_id
            value: "{{workflow.parameters.asa_id}}"
          - name: asa_task_id
            value: "{{workflow.parameters.asa_task_id}}"
          - name: status
            value: "ROLLBACK_FAILED"
          - name: output
            value: "{{workflow.outputs.parameters.rollback_output_global}}"
        when: "{{workflow.status}} != Succeeded"

  - name: main
    steps:
    - - name: notify-rollback-start
        templateRef:
          name: update-tks-asa-status
          template: updateTksAsaStatus
        arguments:
          parameters:
          - name: organization_id
            value: "{{workflow.parameters.organization_id}}"
          - name: project_id
            value: "{{workflow.parameters.project_id}}"
          - name: asa_id
            value: "{{workflow.parameters.asa_id}}"
          - name: asa_task_id
            value: "{{workflow.parameters.asa_task_id}}"
          - name: status
            value: "ROLLBACKING"
          - name: output
            value: ""
    - - name: rollback-app
        template: rollback-app
    - - name: update-endpoint-url
        templateRef:
          name: update-tks-asa-endpoint
          template: updateTksAsaEndpoint
        arguments:
          parameters:
          - name: organization_id
            value: "{{workflow.parameters.organization_id}}"
          - name: project_id
            value: "{{workflow.parameters.project_id}}"
          - name: asa_id
            value: "{{workflow.parameters.asa_id}}"
          - name: asa_task_id
            value: "{{workflow.parameters.asa_task_id}}"
          - name: endpoint
            value: ""
          - name: preview_endpoint
            value: "N/A"
          - name: helm_revision
            value: "{{steps.rollback-app.outputs.parameters.revision}}"
    - - name: notify-rollback-success
        templateRef:
          name: update-tks-asa-status
          template: updateTksAsaStatus
        arguments:
          parameters:
          - name: organization_id
            value: "{{workflow.parameters.organization_id}}"
          - name: project_id
            value: "{{workflow.parameters.project_id}}"
          - name: asa_id
            value: "{{workflow.parameters.asa_id}}"
          - name: asa_task_id
            value: "{{workflow.parameters.asa_task_id}}"
          - name: status
            value: "{{steps.rollback-app.outputs.parameters.status}}"
          - name: output
            value: "{{steps.rollback-app.outputs.parameters.rollback_output}}"

  #######################
  # Template Definition #
  #######################

  - name: rollback-app
    volumes:
    - name: out
      emptyDir: {}
    outputs:
      parameters:
      - name: rollback_output
        valueFrom:
          path: /mnt/out/rollback_output.log
        globalName: rollback_output_global
      - name: status
        valueFrom:
          path: /mnt/out/rollback_status
      - name: revision
        valueFrom:
          path: /mnt/out/revision
    container:
      image: harbor.taco-cat.xyz/tks/appserving-worker:latest
      volumeMounts:
      - name: out
        mountPath: /mnt/out
      command:
      - /bin/sh
      - '-exc'
      - |
        ROLLBACK_LOG='/mnt/out/rollback_output.log'
        app_name={{workflow.parameters.app_name}}
        namespace={{workflow.parameters.namespace}}
        helm_revision={{workflow.parameters.helm_revision}}

        echo "*workflow name: {{workflow.name}}\n-----" | tee -a $ROLLBACK_LOG

        # Prepare kubeconfig
        echo "Preparing kubeconfig for target cluster..." | tee -a $ROLLBACK_LOG
        KUBECONFIG_=$(kubectl get secret -n {{workflow.parameters.target_cluster_id}} {{workflow.parameters.target_cluster_id}}-tks-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
        if [[ -z "$KUBECONFIG_" ]]; then
          echo "Couldn't get kubeconfig for cluster {{workflow.parameters.target_cluster_id}}" | tee -a $ROLLBACK_LOG
          exit 1
        fi

        echo "$KUBECONFIG_" > /etc/kubeconfig_temp
        chmod 0600 /etc/kubeconfig_temp
        export KUBECONFIG='/etc/kubeconfig_temp'



        #==========================================================
        # function: check_rollout_phase (Healthy)
        #==========================================================
        function check_rollout_phase() {
          # check if abort is completed
          rollout_phase=$1
          rollout_status=$2
          app_name={{workflow.parameters.app_name}}
          rollback_done=false
          SLEEP_INTERVAL=6

          echo "Checking rollout phase.." | tee -a $ROLLBACK_LOG

          for i in `seq 1 10`
          do
            phase=$( (kubectl get rollout ${app_name} -n {{workflow.parameters.namespace}} -o jsonpath='{.status.phase}') 2> >(tee -a $ROLLBACK_LOG >&2) )
            ro_stat=$(kubectl argo rollouts status ${app_name} -n {{workflow.parameters.namespace}} --timeout 2s | cut -d' ' -f1 || true)

            if [ "$phase" == "$rollout_phase" ] && [ "$ro_stat" == "$rollout_status" ]; then
              echo "Rollout phase is $rollout_phase now." | tee -a $ROLLBACK_LOG
              rollback_done=true
              break
            else
              echo "Waiting for desired rollout phase.. sleeping $SLEEP_INTERVAL secs.."
              sleep $SLEEP_INTERVAL
            fi
          done

          if [ "$rollback_done" = false ]; then
            echo "Timed out waiting for rollout to reach the desired phase." | tee -a $ROLLBACK_LOG
            exit 1
          fi
        }



        #==========================================================
        # function: check_rollout_replicas
        #==========================================================
        function check_rollout_replicas() {
          # Check num of replicas
          ready=false
          SLEEP_INTERVAL=10

          echo "Checking rollout replicas.." | tee -a $ROLLBACK_LOG

          for i in `seq 1 10`
          do
            replicas=$( (kubectl get rollout/{{workflow.parameters.app_name}} -n {{workflow.parameters.namespace}} -o jsonpath='{.status.replicas}') 2> >(tee -a $ROLLBACK_LOG >&2) )
            available_repls=$(kubectl get rollout/{{workflow.parameters.app_name}} -n {{workflow.parameters.namespace}} -o jsonpath='{.status.availableReplicas}')

            if [ -z "$replicas" ]; then
              echo "Failed to get number of replicas. Exiting workflow.." | tee -a $ROLLBACK_LOG
              exit 1
            fi

            # check if replicas == availableReplicas
            if [ "$replicas" == "$available_repls" ]; then
              echo "All replicas are available. Rollback is successful!" | tee -a $ROLLBACK_LOG
              ready=true
              break
            fi
            sleep $SLEEP_INTERVAL
          done  # End of FOR loop #

          if [ "$ready" = false ]; then
            echo "Timed out waiting for rollback to be done.." | tee -a $ROLLBACK_LOG
            exit 1
          fi
        }



        #==========================================================
        # Write revision (latest deployed version)
        #==========================================================
        function write_revision() {
          # Writing helm release info to file.
          revision=$(helm history {{workflow.parameters.app_name}} --kubeconfig /etc/kubeconfig_temp -n {{workflow.parameters.namespace}} | grep deployed | cut -d' ' -f1)
          
          # Cmds with pipe doesn't catch correct exit code, so we need to check it somehow.
          if [ -z "$revision" ]; then
            echo "Failed to get helm release revision. Exiting workflow.." | tee -a $ROLLBACK_LOG
            exit 1
          fi

          # Debug revision number
          echo "Deployed revision number: $revision"
          echo $revision > /mnt/out/revision
        }



        #==========================================================
        # Start Rollback
        #==========================================================
        echo "Starting rollback to revision $helm_revision.." | tee -a $ROLLBACK_LOG

        # For rolling-update, change autoPromotionEnabled to true
        # TODO: considering canary strategy 
        kubectl patch rollout $app_name -n $namespace --type='merge' -p '{"spec": {"strategy": {"blueGreen": {"autoPromotionEnabled": true}}}}' 2> >(tee -a $ROLLBACK_LOG >&2)

        eval "helm rollback $app_name -n $namespace $helm_revision" 2> >(tee -a $ROLLBACK_LOG >&2)



        #==========================================================
        # check promote finished (Healthy)
        #==========================================================
        check_rollout_phase "Healthy" "Healthy"
        


        #==========================================================
        # check replicas
        #==========================================================
        check_rollout_replicas



        #==========================================================
        # write information
        #==========================================================
        # write revision
        write_revision

        # Write deployment status to file for next step
        echo "ROLLBACK_SUCCESS" > /mnt/out/rollback_status
