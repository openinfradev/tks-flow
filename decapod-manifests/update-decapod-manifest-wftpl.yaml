apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: update-decapod-manifest
  namespace: argo
spec:
  templates:
  - name: updateManifest
    synchronization:
      mutex:
        name: default
    inputs:
      parameters:
      # Repo URL that doesn't include 'http://'. (e.g., "github.com/ORG_NAME/REPO_NAME")
      - name: site_repo_url
        value: ""
      - name: action
        value: "update"
      - name: cluster_name
        value: ""
      - name: app_group
        value: "lma"
      - name: chart
        value: "thanos"
      # kv_map_str usage #
      # - 'update' action: {"k1": "v1", "k2": "v2"}
      # - 'insert' action: above format or value as list type. For eg, {"key": [v1, v2]}
      - name: kv_map_str
        value: ""
    script:
      image: sktcloud/python-centos-wf-worker:v2.0
      command: ["python"]
      envFrom:
        - secretRef:
            name: "github-tks-mgmt-token"
      source: |
        import sys
        import argparse
        import git
        import ruamel.yaml
        import os
        import json

        action = "{{inputs.parameters.action}}"
        clusterName = "{{inputs.parameters.cluster_name}}"
        appGroup = "{{inputs.parameters.app_group}}"
        chartName = "{{inputs.parameters.chart}}"
        kvMapStr = "{{inputs.parameters.kv_map_str}}"
        kvMapStr2 = kvMapStr.replace("'", "\"")
        kvMap = json.loads(kvMapStr2)

        repo = None
        config = {}
        commit_msg = ''
        numChanged = 0
        siteDir = 'cluster-site'
        sitePath = "./{}".format(siteDir)
        siteFileName = "{}/{}/site-values.yaml".format(clusterName,appGroup)
        siteFileNameFull = "{}/{}".format(sitePath, siteFileName)

        # Clone or re-use site repository #
        if not os.path.isdir(sitePath):
            print("Cloning repository...")

            repoUrl = "https://" + os.environ['TOKEN'] + "@{{inputs.parameters.site_repo_url}}"
            try:
              repo = git.Repo.clone_from(repoUrl, siteDir)
              with repo.config_writer() as git_config:
                  git_config.set_value('user', 'email', 'tks-argo@tks.com')
                  git_config.set_value('user', 'name', 'TKS Argo')
              print("Cloned repo contents:")
              os.system("ls -al {}".format(sitePath))
              os.system("ls -al {}/{}".format(sitePath, clusterName))
            except git.exc.GitCommandError as e:
              print("Repository {} doesn't exist. Skipping..".format(repoUrl))
              print(e)
              sys.exit(0)
        else:
            print("The repo already exists. Pulling latest updates..")

            repo = git.Repo(sitePath)
            repo.remotes.origin.pull()

        with open(siteFileNameFull, 'r') as f:
            config = ruamel.yaml.round_trip_load(f, preserve_quotes=True)

        charts = config["charts"]
        chartFound = [chart for chart in charts if chart['name'] == chartName][0]

        if action == 'update':
            for k,v in kvMap.items():
              if (chartFound['override'][k] == v):
                  print("The value {} isn't changed. Skipping update...".format(v))
              else:
                  chartFound['override'][k] = v
                  numChanged += 1
            commit_msg = "update items for {} chart in '{}' cluster".format(chartName, clusterName)
        elif action == 'insert':
            for k,v in kvMap.items():
              # If the value is list type, then append one by one iterating over the list. 
              if isinstance(v, list):
                for item in v:
                  if item in chartFound['override'][k]:
                    print("The value {} already exists.".format(item))
                  else:
                    chartFound['override'][k].append(item)
                    numChanged += 1
              elif (v in chartFound['override'][k]):
                  print("The value {} already exists.".format(v))
              else:
                  chartFound['override'][k].append(v)
                  numChanged += 1
            commit_msg = "insert items for {} chart in '{}' cluster".format(chartName, clusterName)
        # DeleteItemFromList
        elif action == 'delete':
            for k,v in kvMap.items():
              if (v in chartFound['override'][k]):
                  print("Found value '{}'. Deleting it...".format(v))
                  chartFound['override'][k].remove(v)
                  numChanged += 1
              else:
                  print("The value {} doesn't exist.".format(v))
            commit_msg = "delete items for {} chart in '{}' cluster".format(chartName, clusterName)
        else:
            sys.exit("Wrong action type")

        if numChanged == 0:
          print("Nothing updated. Exiting task..")
          sys.exit(0)

        ###############################
        # Commit and push the changed #
        ###############################

        with open(siteFileNameFull, 'w') as f:
            ruamel.yaml.round_trip_dump(config, f)

        diff = repo.git.diff(repo.head.commit.tree)
        print(diff)

        # Provide a list of the files to stage
        repo.index.add([siteFileName])

        # Provide a commit message
        repo.index.commit(commit_msg)
        res = repo.remotes.origin.push()[0]

        # flag '256' means successful fast-forward
        if res.flags != 256:
            print(res.summary)
            sys.exit("Push failed!")

