apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-service-mesh
  namespace: argo
spec:
  entrypoint: deploy-tks-service-mesh
  arguments:
    parameters:
    - name: site_name
      value: "decapod-reference"
    # Replace these urls properly for your env #
    - name: manifest_repo_url
      value: "https://github.com/openinfradev/decapod-manifests"
    - name: revision
      value: "main"
    - name: app_prefix
      value: "{{workflow.parameters.site_name}}"
    #===============================
    # For tks-info task
    #===============================
    - name: tks_info_host
      value: "127.0.0.1"
    - name: cluster_id
      value: "Cabbead61"
    - name: app_group_id
      value: "Aabbead61"
    #===============================
    # For service-mesh-portal
    #===============================
    - name: zone_id
      value: "Z104697219C1N0592X9B3"
    - name: service_domain
      value: "taco-cat.xyz"
    - name: keycloak_namespace
      value: "keycloak"
    - name: keycloak_instance_name
      value: "tks-keycloak"
    - name: keycloak_url
      value: "keycloak-ft.taco-cat.xyz"
    - name: cluster_domain
      value: "cluster.local"
    - name: service_cert_secret_name
      value: "taco-cat-tls"

  volumes:
  - name: tks-proto-vol
    configMap:
      name: tks-proto
  - name: kubeconfig-adm
    secret:
      secretName: tks-admin-kubeconfig-secret
  - name: awsconfig-route53
    secret:
      secretName: awsconfig-secret
  
  templates:
  #=========================================================
  # Template Pipeline
  #=========================================================
  - name: deploy-tks-service-mesh
    steps:
    - - name: install-service-mesh-app
        templateRef:
          name: service-mesh
          template: deploy-start
    - - name: install-portal
        templateRef:
          name: tks-service-mesh-dashboard
          template: deploy-tks-service-dashboard

  #=========================================================
  # Template Definition
  #=========================================================
  - name: deploy-ingress-temporary
    inputs:
      parameters:
      - name: site_name
      - name: kubeconfig_secret_name
    container:
      name: deploy-ingress-temporary
      image: harbor-cicd.taco-cat.xyz/tks/hyperkube:v1.18.6
      command:
      - /bin/bash
      - '-c'
      - |
        function log() {
          level=$1
          msg=$2
          date=$(date '+%F %H:%M:%S')
          echo "[$date] $level     $msg"
        }

        function deploy_ingress() {
          ingress_name=$1
          namespace=$2
          host_name=$3
          service_name=$4
          service_port=$5

          kubectl --kubeconfig=/etc/kubeconfig get ing $ingress_name -n $namespace
          if [[ $? =~ 1 ]]; then
            cat <<EOF | kubectl --kubeconfig=/etc/kubeconfig apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          annotations:
            kubernetes.io/ingress.class: nginx
          name: $ingress_name
          namespace: $namespace
        spec:
          rules:
          - host: $host_name
            http:
              paths:
              - pathType: ImplementationSpecific
                backend:
                  service:
                    name: $service_name
                    port:
                      number: $service_port
          tls:
          - hosts:
            - $host_name
            secretName: taco-cat-tls
        EOF

            log "INFO" "${ingress_name} in ${namespace} successfully created."
          fi
        }

        GRAFANA_HOST=grafana-${SITE_NAME}.taco-cat.xyz
        KIBANA_HOST=kibana-${SITE_NAME}.taco-cat.xyz
        KIALI_HOST=kiali-${SITE_NAME}.taco-cat.xyz

        cat <<< "$KUBE_CONFIG" > /etc/kubeconfig

        deploy_ingress "grafana" "lma" $GRAFANA_HOST "grafana" "80"
        deploy_ingress "kibana" "lma" $KIBANA_HOST "eck-kibana-kb-http" "5601"
        deploy_ingress "kiali" "istio-system" $KIALI_HOST "kiali" "20001"
      env:
      - name: SITE_NAME
        value: '{{inputs.parameters.site_name}}'
      ## WARNING: This doesn't work. The secret should be read from cluster namespace ##
      - name: KUBE_CONFIG
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.kubeconfig_secret_name }}"
            key: value
    activeDeadlineSeconds: 900
    retryStrategy:
      limit: 2
