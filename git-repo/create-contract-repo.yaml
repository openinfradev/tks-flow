apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-create-contract-repo
  namespace: argo
spec:
  entrypoint: main
  arguments:
    parameters:
    - name: contract_id
      value: "contract_uuid"
    # Revision for decapod-base and decapod-site repo
    - name: revision
      value: "main"
  templates:
  - name: createContractRepo
    activeDeadlineSeconds: 120
    container:
      name: 'createRepo'
      image: harbor-cicd.taco-cat.xyz/tks/ghcli-alpine:2.0.0
      imagePullPolicy: IfNotPresent
      command:
      - /bin/bash
      - -ecx
      - |

        function gh_create_repo() {
            echo $TOKEN | gh auth login --with-token
            echo "===== Current repo list ====="
            gh repo list openinfradev | grep decapod-site
            gh repo list ${USERNAME}

            echo "===== Create and initialize ${USERNAME}/${CONTRACT_ID} site and manifests repositories ====="
            gh repo create ${USERNAME}/${CONTRACT_ID} --public --confirm

            cd ${CONTRACT_ID}
            echo -n ${TOKEN} | gh secret set API_TOKEN_GITHUB
        }

        function gitea_create_repo() {
            curl -X POST -H "content-type: application/json" -H "Authorization: token ${TOKEN}" --data '{"name": "'${CONTRACT_ID}'"}' $GIT_SVC_HTTP://${GIT_SVC_BASE_URL}/api/v1/orgs/${USERNAME}/repos
        }

        GIT_SVC_HTTP=${GIT_SVC_URL%://*}
        GIT_SVC_BASE_URL=${GIT_SVC_URL#*//}

        if [ "$GIT_SVC_TYPE" = "gitea" ];then
            gitea_create_repo
        else
            gh_create_repo
        fi

        git clone -b ${REVISION} $GIT_SVC_HTTP://$(echo -n $TOKEN)@${GIT_SVC_BASE_URL}/${USERNAME}/decapod-site.git
        cd decapod-site
        echo "Decapod Site Repo Revision: "${REVISION} > META
        echo "Decapod Site Repo Commit: "$(git rev-parse HEAD) >> META

        rm -rf .github

        # TODO: support to use decapod-reference-offline later?
        rm -rf decapod-reference
        rm -rf decapod-reference-offline

        # Remove unnecessary app_group directory before commit.
        # If these kinds of apps increases, then they might be defined as black list
        # and then removed by FOR loop iteration.
        # For now, this hardcoding seems enough.
        rm -rf aws-reference/openstack aws-reference/decapod-controller aws-reference/admin-tools
        rm -rf byoh-reference/openstack byoh-reference/decapod-controller byoh-reference/admin-tools

        git config --global user.email "taco_support@sk.com"
        git config --global user.name "SKTelecom TACO"
        git add .
        git commit -m "new contract: ${CONTRACT_ID}"

        git remote add new_contract $GIT_SVC_HTTP://$(echo -n $TOKEN)@${GIT_SVC_BASE_URL}/${USERNAME}/${CONTRACT_ID}
        git push new_contract ${REVISION}:main
        cd ..

      envFrom:
        - secretRef:
            name: "git-svc-token"
      env:
        - name: CONTRACT_ID
          value: "{{workflow.parameters.contract_id}}"
        - name: REVISION
          value: "{{workflow.parameters.revision}}"

  - name: main
    steps:
      - - name: createContractRepository
          template: createContractRepo
          arguments: {}

