apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: keycloak-client
  namespace: argo
spec:
  templates:
    - name: delete-client
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: test-client
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenID, KeycloakAdmin, KeycloakOpenIDConnection
          import requests
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def delete_client(url, realm_name, client_id, token):
              if (url[(- 1)] == '/'):
                  url = url[:(- 1)]
              path = f'/admin/realms/{realm_name}/clients/{client_id}'
              headers = {'Content-Type': 'application/json', 'Authorization': ('Bearer ' + token['access_token'])}
              response = requests.delete((url + path), headers=headers)
              if (response.status_code == 204):
                  print(f'delete client {client_id} success')
              elif (response.status_code == 404):
                  raise Exception(response.text)
              else:
                  raise Exception(response.text)
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(client_id=input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception('get client failed')
              try:
                  delete_client(url=input_params['server_url'], realm_name=input_params['target_realm_name'], client_id=hashed_client_id, token=keycloak_admin.connection.token)
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception('delete client on keycloak failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"""delete client "{input_params['target_client_id']}" failed""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: create-client-role
      inputs:
        parameters:
          - name: server_url
            value: https://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: test-client2
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
          - name: client_role_name
            value: admin
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenIDConnection, KeycloakAdmin, KeycloakOpenID
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}', 'client_role_name': '{{inputs.parameters.client_role_name}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/dev_kubeconfig/kubeconfig')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(client_id=input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']} failed""")
              try:
                  role_name = input_params['client_role_name']
                  keycloak_admin.create_client_role(client_role_id=hashed_client_id, payload={'name': role_name, 'clientRole': True}, skip_exists=True)
                  print(f"""create client role "{role_name}" in client "{input_params['target_client_id']}" success""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception('create client role on keycloak failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"""create client role "{input_params['client_role_name']}" in client "{input_params['target_client_id']}" failed""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: append-client-redirect-uri
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: k8s-oidc7
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
          - name: redirect_uri
            value: aaaa
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenID, KeycloakAdmin, KeycloakOpenIDConnection
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}', 'redirect_uri': '{{inputs.parameters.redirect_uri}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
                  client = keycloak_admin.get_client(client_id=hashed_client_id)
                  existing_redirect_uris = client['redirectUris']
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']} failed""")
              try:
                  redirect_uri = input_params['redirect_uri']
                  if (redirect_uri in existing_redirect_uris):
                      print(f""""{redirect_uri}" already exists in client "{input_params['target_client_id']}".""")
                  else:
                      existing_redirect_uris.append(redirect_uri)
                      client['redirectUris'] = existing_redirect_uris
                      keycloak_admin.update_client(client_id=hashed_client_id, payload=client)
                      print(f"""append "{redirect_uri}" in client "{input_params['target_client_id']}" success""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception('update client on keycloak failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"""append redirect uri "{input_params['redirect_uri']}" to client "{input_params['target_client_id']}" failed""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: remove-client-redirect-uri
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: k8s-oidc7
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
          - name: redirect_uri
            value: aaaa
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenID, KeycloakAdmin, KeycloakOpenIDConnection
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}', 'redirect_uri': '{{inputs.parameters.redirect_uri}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
                  client = keycloak_admin.get_client(client_id=hashed_client_id)
                  existing_redirect_uris = client['redirectUris']
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']} failed""")
              try:
                  if (input_params['redirect_uri'] not in existing_redirect_uris):
                      print(f"""redirect-uri "{input_params['redirect_uri']}" not exist in client "{hashed_client_id}".""")
                  else:
                      existing_redirect_uris.remove(input_params['redirect_uri'])
                      client['redirectUris'] = existing_redirect_uris
                      keycloak_admin.update_client(client_id=hashed_client_id, payload=client)
                      print(f"""remove redirect-uri "{input_params['redirect_uri']}" in client "{hashed_client_id}" success""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f'remove redirect-uri in client {hashed_client_id} on keycloak failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"""remove redirect uri "{input_params['redirect_uri']}" to client "{input_params['target_client_id']}" failed""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: create-client-scope-mapper-client-role
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: k8s-oidc6
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
          - name: mapper_name
            value: k8s-role-mapper
          - name: claim_name
            value: groups
          - name: add_to_access_token
            value: false
          - name: add_to_id_token
            value: true
          - name: add_to_userinfo
            value: false
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenIDConnection, KeycloakAdmin, KeycloakOpenID
          import requests
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}', 'mapper_name': '{{inputs.parameters.mapper_name}}', 'claim_name': '{{inputs.parameters.claim_name}}', 'add_to_access_token': '{{inputs.parameters.add_to_access_token}}', 'add_to_id_token': '{{inputs.parameters.add_to_id_token}}', 'add_to_userinfo': '{{inputs.parameters.add_to_userinfo}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def create_client_scope_mapper(url, realm_name, client_id, hashed_client_id, token, mapper_name):
              if (url[(- 1)] == '/'):
                  url = url[:(- 1)]
              path = f'/admin/realms/{realm_name}/clients/{hashed_client_id}/protocol-mappers/models'
              headers = {'Content-Type': 'application/json', 'Authorization': ('Bearer ' + token['access_token'])}
              data = {'name': mapper_name, 'protocol': 'openid-connect', 'protocolMapper': 'oidc-usermodel-client-role-mapper', 'config': {'usermodel.clientRoleMapping.clientId': client_id, 'claim.name': input_params['claim_name'], 'access.token.claim': input_params['add_to_access_token'], 'id.token.claim': input_params['add_to_id_token'], 'userinfo.token.claim': input_params['add_to_userinfo'], 'multivalued': 'true', 'jsonType.label': 'String'}}
              response = requests.post((url + path), headers=headers, json=data)
              if ((response.status_code == 201) or (response.status_code == 409)):
                  print(f'create client scope mapper {client_id} success')
              else:
                  raise Exception(response.text)
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(client_id=input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']} failed""")
              try:
                  create_client_scope_mapper(url=input_params['server_url'], realm_name=input_params['target_realm_name'], client_id=input_params['target_client_id'], hashed_client_id=hashed_client_id, token=keycloak_admin.connection.token, mapper_name=input_params['mapper_name'])
                  print(f"""create client scope mapper "{input_params['mapper_name']}" in client "{input_params['target_client_id']} success""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception('create client role on keycloak failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"""create client scope mapper "{input_params['mapper_name']}" in client "{input_params['target_client_id']} failed""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: delete-client-role
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: test-client2
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
          - name: client_role_name
            value: admin
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenIDConnection, KeycloakAdmin, KeycloakOpenID
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}', 'client_role_name': '{{inputs.parameters.client_role_name}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(client_id=input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']} failed""")
              try:
                  role_name = input_params['client_role_name']
                  keycloak_admin.delete_client_role(client_role_id=hashed_client_id, role_name=role_name)
                  print(f"""create client role {role_name} in client "{input_params['target_client_id']}" success""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception('create client role on keycloak failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"""create client role {role_name} in client "{input_params['target_client_id']}" failed""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: create-client
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: test-client2
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenID, KeycloakAdmin, KeycloakOpenIDConnection
          import requests
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def create_client(url, realm_name, client_id, token):
              if (url[(- 1)] == '/'):
                  url = url[:(- 1)]
              path = f'/admin/realms/{realm_name}/clients'
              headers = {'Content-Type': 'application/json', 'Authorization': ('Bearer ' + token['access_token'])}
              data = {'clientId': client_id, 'enabled': True, 'publicClient': True, 'protocol': 'openid-connect', 'standardFlowEnabled': True, 'implicitFlowEnabled': False, 'directAccessGrantsEnabled': True, 'serviceAccountsEnabled': False, 'authorizationServicesEnabled': False, 'fullScopeAllowed': True}
              response = requests.post((url + path), headers=headers, json=data)
              if (response.status_code == 201):
                  print(f'create client {client_id} success')
              elif (response.status_code == 409):
                  raise Exception(response.text)
              else:
                  raise Exception(response.text)
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master', verify=False)
          token = keycloak_openid.token(grant_type='password', username='admin', password=secret)
          try:
              try:
                  keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
                  print(f"login to {input_params['server_url']} success")
              except Exception as e:
                  print(e)
                  print(f"login to {input_params['server_url']} failed")
                  sys.exit(1)
              try:
                  hashed_client_id = keycloak_admin.get_client_id(input_params['target_client_id'])
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client with id "{input_params['target_client_id']}" failed""")
              finally:
                  keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              if hashed_client_id:
                  print('client already exists')
              else:
                  create_client(input_params['server_url'], input_params['target_realm_name'], input_params['target_client_id'], token)
                  print(f"""create client "{input_params['target_client_id']}" success""")
              keycloak_openid.logout(token['refresh_token'])
          except Exception as e:
              print(e)
              print('create client failed')
              keycloak_openid.logout(token['refresh_token'])
              sys.exit(1)
    - name: update-client-secret
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: test-client2
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
          - name: client_secret_enabled
            value: 'true'
          - name: client_secret_value
            value: ''
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenID, KeycloakAdmin, KeycloakOpenIDConnection
          from kubernetes import client, config
          import sys
          import base64
          import secrets
          import string
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}', 'client_secret_enabled': '{{inputs.parameters.client_secret_enabled}}', 'client_secret_value': '{{inputs.parameters.client_secret_value}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
                  client = keycloak_admin.get_client(client_id=hashed_client_id)
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']} failed""")
              try:
                  if (input_params['client_secret_enabled'] == 'true'):
                      if (input_params['client_secret_value'] == ''):
                          characters = (string.ascii_letters + string.digits)
                          client['secret'] = ''.join((secrets.choice(characters) for i in range(32)))
                      else:
                          client['secret'] = input_params['client_secret_value']
                      client['publicClient'] = False
                      keycloak_admin.update_client(client_id=hashed_client_id, payload=client)
                  else:
                      client['publicClient'] = True
                      keycloak_admin.update_client(client_id=hashed_client_id, payload=client)
                      print(f"""delete client secret of client id "{input_params['target_client_id']}" on keycloak""")
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""update client id "{input_params['target_client_id']} failed""")
              print(f"""update client "{input_params['target_client_id']}" success""")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print('create client failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: get-client-secret
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test3
          - name: target_client_id
            value: test-client2
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
      outputs:
        parameters:
          - name: client-secret
            valueFrom:
              path: /out/client_secret.txt
      volumes:
        - name: out
          emptyDir: {}
      script:
        volumeMounts:
          - name: out
            mountPath: "/out"
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenID, KeycloakAdmin, KeycloakOpenIDConnection
          import requests
          from kubernetes import client, config
          import sys
          import base64
          import json
          output_params = {}
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'target_client_id': '{{inputs.parameters.target_client_id}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def get_client_secret(url, realm_name, client_id, token):
              if (url[(- 1)] == '/'):
                  url = url[:(- 1)]
              path = f'/admin/realms/{realm_name}/clients'
              headers = {'Content-Type': 'application/json', 'Authorization': ('Bearer ' + token['access_token'])}
              params = {'clientId': client_id}
              response = requests.get((url + path), headers=headers, params=params)
              if (response.status_code == 200):
                  client_data = response.json()
                  if client_data:
                      client_secret = client_data[0]['secret']
                      return client_secret
                  else:
                      print(f'No client found with clientId: {client_id}')
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api(local=False)
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name=input_params['target_realm_name'], user_realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              try:
                  hashed_client_id = keycloak_admin.get_client_id(input_params['target_client_id'])
                  print(f"""hashed_client_id of client id "{input_params['target_client_id']}" is "{hashed_client_id}".""")
                  client = keycloak_admin.get_client(client_id=hashed_client_id)
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client id "{input_params['target_client_id']}" failed""")
              try:
                  client_secret = get_client_secret(input_params['server_url'], input_params['target_realm_name'], input_params['target_client_id'], keycloak_admin.connection.token)
                  print(f"""client secret of client id "{input_params['target_client_id']}" is "{client_secret}".""")
                  output_params['client_secret'] = client_secret
                  print('write client secret to /out/client_secret.txt')
                  with open('/out/client_secret.txt', 'w') as file:
                      file.write(client_secret)
              except Exception as inner_e:
                  print(inner_e)
                  raise Exception(f"""get client secret of client id "{input_params['target_client_id']}" failed""")
              print(f'get client secret success')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print('Get client secret failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
