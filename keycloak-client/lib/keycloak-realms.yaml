apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: keycloak-realm
  namespace: argo
spec:
  templates:
    - name: delete-realm
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test4
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenIDConnection, KeycloakAdmin, KeycloakOpenID
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api()
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              keycloak_admin.delete_realm(realm_name=input_params['target_realm_name'])
              print(f"delete realm {input_params['target_realm_name']} success")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print(f"delete realm {input_params['target_realm_name']} failed")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
    - name: create-realm
      inputs:
        parameters:
          - name: server_url
            value: http://tks-console-dev.taco-cat.xyz/auth/
          - name: target_realm_name
            value: test4
          - name: keycloak_credential_secret_name
            value: keycloak
          - name: keycloak_credential_secret_namespace
            value: keycloak
      script:
        command:
          - python3
        image: harbor.taco-cat.xyz/dev/python-keycloak-cli:v0.1.0
        source: |2
        
          from keycloak import KeycloakOpenIDConnection, KeycloakAdmin, KeycloakOpenID
          from kubernetes import client, config
          import sys
          import base64
          input_params = {'server_url': '{{inputs.parameters.server_url}}', 'target_realm_name': '{{inputs.parameters.target_realm_name}}', 'keycloak_credential_secret_name': '{{inputs.parameters.keycloak_credential_secret_name}}', 'keycloak_credential_secret_namespace': '{{inputs.parameters.keycloak_credential_secret_namespace}}'}
        
          def get_kubernetes_api(local=False):
              if local:
                  import os
                  kubeconfig_path = os.path.expandvars('$HOME/.kube/config')
                  config.load_kube_config(config_file=kubeconfig_path)
              else:
                  config.load_incluster_config()
              return client.CoreV1Api()
        
          def get_secret(k8s_client, secret_name, secret_namespace):
              secret_obj = k8s_client.read_namespaced_secret(name=secret_name, namespace=secret_namespace)
              encoded_data = secret_obj.data.get('admin-password')
              cleaned_data = encoded_data.strip()
              decoded_data = base64.b64decode(cleaned_data).decode('utf-8')
              return decoded_data
        
          def input_validation(origin_input_params):
              if (not (origin_input_params['server_url'][(- 1)] == '/')):
                  origin_input_params['server_url'] += '/'
          input_validation(input_params)
          k8s_client = get_kubernetes_api()
          try:
              secret_name = input_params['keycloak_credential_secret_name']
              secret_namespace = input_params['keycloak_credential_secret_namespace']
              secret = get_secret(k8s_client, secret_name, secret_namespace)
              print(f'get secret "{secret_name}" in "{secret_namespace}" namespace')
          except Exception as e:
              print(e)
              print(f'failed to get secret "{secret_name}" in "{secret_namespace}" namespace')
              sys.exit(1)
          keycloak_connection = KeycloakOpenIDConnection(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master', username='admin', password=secret, verify=False)
          keycloak_openid = KeycloakOpenID(server_url=input_params['server_url'], client_id='admin-cli', realm_name='master')
          try:
              keycloak_admin = KeycloakAdmin(connection=keycloak_connection)
              print(f"login to {input_params['server_url']} success")
          except Exception as e:
              print(e)
              print(f"login to {input_params['server_url']} failed")
              sys.exit(1)
          try:
              keycloak_admin.create_realm({'realm': input_params['target_realm_name'], 'enabled': True, 'displayName': input_params['target_realm_name']})
              print(f"create realm {input_params['target_realm_name']} success")
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
          except Exception as e:
              print(e)
              print('create realm failed')
              keycloak_openid.logout(keycloak_admin.connection.token['refresh_token'])
              sys.exit(1)
