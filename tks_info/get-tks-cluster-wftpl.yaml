apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: tks-get-cluster
  namespace: argo
spec:
  entrypoint: getTksCluster
  arguments:
    parameters:
    - name: tks_api_url
      value: "http://tks-api-dev.taco-cat.xyz:9110"
    - name: cluster_id
      value: "cabbead61"  
  templates:
  - name: getTksCluster
    outputs:
      parameters:
      - name: cluster_info
        valueFrom:
          path: /mnt/out/cluster_info.txt
      - name: cluster_type
        valueFrom:
          path: /mnt/out/cluster_type.txt 
      - name: cluster_domains
        valueFrom:
          path: /mnt/out/cluster_domains.txt 
    volumes:
    - name: out
      emptyDir: {}
    script:
      image: harbor.taco-cat.xyz/tks/centos-tks-api:v1.0
      command: ["python"]
      env:
      - name: PYTHONPATH
        value: "/opt/protobuf/:/opt/rh/rh-python38/root/lib/python3.8/site-packages/:/opt/app-root/lib/python3.8/site-packages/"
      - name: TKS_API_URL
        value: "{{workflow.parameters.tks_api_url}}"
      envFrom:
      - secretRef:
          name: "tks-api-secret"       
      volumeMounts:
      - name: out
        mountPath: /mnt/out
      source: |
        import sys
        import requests
        import json
        import os

        TKS_API_URL = "{{workflow.parameters.tks_api_url}}"
        CLUSTER_ID = "{{workflow.parameters.cluster_id}}"

        def getToken() :
            data = {
                'organizationId' : os.environ['ORGANIZATION_ID'],
                'accountId': os.environ['ACCOUNT_ID'],
                'password' : os.environ['PASSWORD']
            }

            res = requests.post(TKS_API_URL+"/api/1.0/auth/login", json = data )
            if res.status_code != 200 :
                return ''
            resJson = res.json()
            return resJson['user']['token']


        res = requests.get(TKS_API_URL+"/api/1.0/clusters/" + CLUSTER_ID + "/site-values", headers={"Authorization": "Bearer " + getToken(), "Content-Type" : "application/json"} )
        if res.status_code != 200 :
            sys.exit('Failed to get cluster')

        print(res.text)
        clusterSiteValues = res.json()['clusterSiteValues']
        clusterDomains = clusterSiteValues['domains']

        with open("/mnt/out/cluster_info.txt", "w") as f:
            #cluster_conf = str(clusterSiteValues)
            cluster_conf = json.dumps(clusterSiteValues)
            print(cluster_conf)
            f.write(cluster_conf)
        with open("/mnt/out/cluster_type.txt", "w") as f:
            cluster_type = clusterSiteValues['clusterType']
            print(cluster_type)
            f.write(cluster_type)
        with open("/mnt/out/cluster_domains.txt", "w") as f:
            cluster_domains = json.dumps(clusterDomains)
            print(cluster_domains)
            f.write(cluster_domains)
